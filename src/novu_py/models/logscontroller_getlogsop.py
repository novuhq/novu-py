"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from novu_py.types import BaseModel
from novu_py.utils import FieldMetadata, HeaderMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class LogsControllerGetLogsRequestTypedDict(TypedDict):
    page: NotRequired[float]
    limit: NotRequired[float]
    status_code: NotRequired[List[float]]
    url: NotRequired[str]
    url_pattern: NotRequired[str]
    transaction_id: NotRequired[str]
    created: NotRequired[float]
    idempotency_key: NotRequired[str]
    r"""A header for idempotency purposes"""


class LogsControllerGetLogsRequest(BaseModel):
    page: Annotated[
        Optional[float],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    limit: Annotated[
        Optional[float],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    status_code: Annotated[
        Optional[List[float]],
        pydantic.Field(alias="statusCode"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    url: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    url_pattern: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    transaction_id: Annotated[
        Optional[str],
        pydantic.Field(alias="transactionId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    created: Annotated[
        Optional[float],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    idempotency_key: Annotated[
        Optional[str],
        pydantic.Field(alias="idempotency-key"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A header for idempotency purposes"""


class LogsControllerGetLogsResponseBodyTypedDict(TypedDict):
    pass


class LogsControllerGetLogsResponseBody(BaseModel):
    pass
