"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .inappcontroldto import InAppControlDto, InAppControlDtoTypedDict
from .steptypeenum import StepTypeEnum
from novu_py.types import BaseModel
import pydantic
from typing import Any, Dict, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


ControlValuesTypedDict = TypeAliasType(
    "ControlValuesTypedDict", Union[InAppControlDtoTypedDict, Dict[str, Any]]
)
r"""Control values for the In-App step."""


ControlValues = TypeAliasType("ControlValues", Union[InAppControlDto, Dict[str, Any]])
r"""Control values for the In-App step."""


class InAppStepUpsertDtoTypedDict(TypedDict):
    name: str
    r"""Name of the step"""
    type: StepTypeEnum
    r"""Type of the step"""
    id: NotRequired[str]
    r"""Unique identifier of the step"""
    control_values: NotRequired[ControlValuesTypedDict]
    r"""Control values for the In-App step."""


class InAppStepUpsertDto(BaseModel):
    name: str
    r"""Name of the step"""

    type: StepTypeEnum
    r"""Type of the step"""

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = None
    r"""Unique identifier of the step"""

    control_values: Annotated[
        Optional[ControlValues], pydantic.Field(alias="controlValues")
    ] = None
    r"""Control values for the In-App step."""
